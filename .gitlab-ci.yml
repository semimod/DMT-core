#to run this locally:
#login to container registry
#>docker login registry.gitlab.com
#run image:
#>gitlab-runner exec docker run_core

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  WHEEL_LINK: ""
stages:
  - format
  - test
  - trigger_doc_stage
  - create_release
  - release

check_format:
  image: registry.gitlab.com/dmt-development/dmt-core:base
  stage: format
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  script:
    - black --check --diff -v .

test_DMT:
  image: registry.gitlab.com/dmt-development/dmt-core:base
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  needs:
    - job: check_format
  script:
    - pip install --upgrade --upgrade-strategy eager -e .[develop,HDF5,latex,remote]
    - pytest --cov=DMT/ test/test_core_no_interfaces/
    - pytest --cov=DMT/ --cov-append test/test_interface_ngspice/test_*.py
    - pytest --cov=DMT/ --cov-append test/test_interface_xyce/test_*.py
    - pytest --cov=DMT/ --cov-append test/test_verilogae/test_*.py
    # Hdev:
    - git clone https://gitlab.com/metroid120/hdev_simulator.git
    - cd hdev_simulator/HdevPy #HdevPy depends on DMT_core and therefore is installed here
    - pip install -e .
    - cd ..
    # download the executable and put it into path
    - curl -L -o hdev --location "https://gitlab.com/api/v4/projects/metroid120%2Fhdev_simulator/jobs/artifacts/master/raw/builddir_docker/hdev?job=build:linux"
    - chmod +x hdev
    - export PATH=$PATH:$(pwd)
    # now create the DMT simulation directory
    - mkdir -p ~/.DMT/simulation_results
    # run many test
    - python3 HdevPy/scripts/run_tests.py
    - cd ..
    - pytest --cov-report term-missing --cov-report html --cov-report xml --cov=DMT/ --cov-append test/test_interface_hdev/test_*.py | tee coverage_report.txt
    - coverage=$(python3 -c "import re; match = ''; match=re.search(r'TOTAL.+?([0-9]+)%', open('coverage_report.txt').read()); print(match.group(1))")
    - anybadge -l coverage -v $coverage -f badge_coverage.svg coverage
  coverage: "/TOTAL.+?([0-9]+)%/"
  artifacts:
    paths:
      - coverage_report.txt
      - htmlcov
      - badge_coverage.svg
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

trigger_doc_job:
  stage: trigger_doc_stage
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
  needs:
    - job: test_DMT
  trigger:
    project: dmt-development/dmt-doc

test_dependencies_python3p10:
  image: python:3.10-bullseye
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  needs:
    - job: check_format
  script:
    - pip install pytest
    - pip install --upgrade --upgrade-strategy eager -e .[HDF5,pyqtgraph,develop,latex,remote]
    - pytest test/test_core_no_interfaces/

    # HDF5
    - pip install -e .[HDF5]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y tables

    # pyqtgraph and pyside2
    - pip install -e .[pyqtgraph,pyside2]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y pyqtgraph PySide2

    # pyqtgraph and pyqt5
    - pip install -e .[pyqtgraph,pyqt5]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y pyqtgraph PyQt5

    # matplotlib
    - pip install -e .[matplotlib]
    - python3 test/test_core_no_interfaces/test_MCard.py
    # - pip uninstall -y matplotlib

    # smithplot
    - pip install -e .[smithplot]
    - python3 test/test_core_no_interfaces/test_MCard.py
    # - pip uninstall -y matplotlib pysmithplot-3.10
    - pip uninstall -y pysmithplot-3.10

    # develop
    - pip install -e .[develop]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y pylint black

    # latex 
    - pip install -e .[latex]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y pylatex pylatexenc

    # remote 
    - pip install -e .[remote]
    - python3 test/test_core_no_interfaces/test_MCard.py
    - pip uninstall -y paramiko scp

test_python3p8:
  image: python:3.8-bullseye
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  needs:
    - job: check_format
  script:
    - pip install pytest
    - pip install --upgrade --upgrade-strategy eager -e .[HDF5,pyqtgraph,develop,latex,remote]
    - pytest test/test_core_no_interfaces/

test_python3p9:
  image: python:3.9-bullseye
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  needs:
    - job: check_format
  script:
    - pip install pytest
    - pip install --upgrade --upgrade-strategy eager -e .[HDF5,pyqtgraph,develop,latex,remote]
    - pytest test/test_core_no_interfaces/

test_python3p11:
  image: python:3.11-bullseye
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH =~ /main/
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
  needs:
    - job: check_format
  script:
    - pip install pytest
    - pip install --upgrade --upgrade-strategy eager -e .[HDF5,pyqtgraph,develop,latex,remote]
    - pytest test/test_core_no_interfaces/

wheel_to_pypi:
  image: registry.gitlab.com/dmt-development/dmt-core:base
  stage: create_release
  rules:
    - if: $CI_COMMIT_TAG =~ /^Version/
  script:
    - VERSION_NR=$(python3 DMT/external/pypi.py --check_version $CI_COMMIT_TAG)
    - sed -i "s/9.9.9/$VERSION_NR/" setup.py
    - python3 setup.py sdist bdist_wheel
    - python3 -c "import re; match = re.search(r'(## \[\d.+?)((## \[)|\Z)', open('CHANGELOG').read(), re.DOTALL); print(match.group(1))" | tee current_changes.md
    # push to pip
    - TWINE_PASSWORD="$PIP_JOB_TOKEN" TWINE_USERNAME=__token__ python3 -m twine upload --verbose --repository-url https://upload.pypi.org/legacy/  dist/*
    - echo "WHEEL_LINK=$(python3 DMT/external/pypi.py --wheel_link)" >> wheel_to_pypi.env
  artifacts:
    paths:
      - current_changes.md
    reports:
      dotenv: wheel_to_pypi.env

release_job:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^Version/
  needs:
    - job: wheel_to_pypi
  script:
    - echo 'Releasing wheel to Pypi'
  release:
    name: $CI_COMMIT_TAG
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_SHA
    description: ./current_changes.md
    assets:
      links:
        - name: 'wheel'
          url: '${WHEEL_LINK}'
          link_type: 'other'
          filepath: /releases/DMT_core.whl
  
sbom:
  image: registry.gitlab.com/dmt-development/dmt-core:base
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^Version/
  needs:
    - job: wheel_to_pypi
  script:
     - pip install --upgrade --upgrade-strategy eager -e .[develop,HDF5,latex,remote]
     - pip install cyclonedx-bom
     - cyclonedx-bom -e
  artifacts:
    paths:
      - cyclonedx.xml

build_container:
  image: docker:20.10.17
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^Version/
  needs:
    - job: wheel_to_pypi
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # build container
    - docker build -t registry.gitlab.com/dmt-development/dmt-core:full .
    - docker tag registry.gitlab.com/dmt-development/dmt-core:full registry.gitlab.com/dmt-development/dmt-core:$CI_COMMIT_TAG
    # push
    - docker push registry.gitlab.com/dmt-development/dmt-core:full
    - docker push registry.gitlab.com/dmt-development/dmt-core:$CI_COMMIT_TAG
  